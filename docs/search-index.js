var searchIndex = JSON.parse('{\
"ffmpeg_video_decoder":{"doc":"","t":[4,3,13,3,13,13,13,13,13,13,13,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["DecodeError","Dimensions","Filesystem","Frame","InvalidSource","Raw","UnableToFindVideoStream","UnableToOpenInput","UnableToReadFrameBuffer","UnableToReadStreamInfo","UnableToSendPacketToDecoder","UnsupportedCodec","VideoDecoder","VideoSource","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","dimensions","dimensions","drop","eq","fmt","fmt","fmt","fmt","framerate","from","from","from","from","from","from","from","height","index","into","into","into","into","into","into_data","into_raw","ne","new","next_frame","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","width","will_loop","0","0"],"q":["ffmpeg_video_decoder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ffmpeg_video_decoder::VideoSource",""],"d":["An error from the decoder","","A path to a file","A single frame from a decoded video","","Raw binary data","This may mean that the source data does not have an active …","","","","","The target codec is not supported by ffmpeg","","The input data for the decoder","","","","","","","","","","","","","","","Get a reference to the raw frame data","Get the dimensions of the frame data","Get the dimensions of the video","","","","","","","Get the framerate of the video (in frames-per-second)","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","The frame number in the source video (starts at 1)","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this frame into its raw data","The raw data along with its dimensions","","Create a new video decoder.","Get the next frame from the input, if <code>self.will_loop()</code> is …","","","","","","","","","","","","","","","","","","","","Check whether the decoder will loop once reaching the end …","",""],"i":[0,0,1,0,2,1,2,2,2,2,2,2,0,0,3,4,2,1,5,3,4,2,1,5,1,5,1,5,3,3,4,4,5,2,2,1,5,4,3,4,2,1,1,1,5,5,3,3,4,2,1,5,3,3,5,4,4,1,5,2,3,4,2,1,5,3,4,2,1,5,3,4,2,1,5,5,4,6,7],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["videosource",4]],[[["",0]],["dimensions",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]]],[[["",0]],["dimensions",3]],[[["",0]],["dimensions",3]],[[["",0]]],[[["",0],["dimensions",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0]],["f32",0]],[[]],[[]],[[]],[[["pathbuf",3]]],[[]],[[["vec",3,[["u8",0]]]]],[[]],[[["",0]],["u32",0]],[[["",0]],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3,[["u8",0]]]],[[]],[[["",0],["dimensions",3]],["bool",0]],[[["bool",0]],["result",4,[["decodeerror",4]]]],[[["",0]],["result",4,[["option",4,[["frame",3]]],["decodeerror",4]]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["u32",0]],[[["",0]],["bool",0]],null,null],"p":[[4,"VideoSource"],[4,"DecodeError"],[3,"Frame"],[3,"VideoDecoder"],[3,"Dimensions"],[13,"Raw"],[13,"Filesystem"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};